# -*- coding: utf-8 -*-
"""RNN Sequence Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_nWJrnh8GDo_iRZHXsmdlOmndmXK0Pd
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
import matplotlib.pyplot as plt

"""#create sequence: 1 to 100


"""

sequence= np.array([i for i in range (1, 101)])

"""#define window size"""

window_size=3
x=[]
y=[]

"""create input-output pairs"""

for i in range(len(sequence)-window_size):
    x.append(sequence[i:i+window_size])
    y.append(sequence[i+window_size])

x=np.array(x)
y=np.array(y)

x=x.reshape(x.shape[0], x.shape[1], 1)

model=Sequential()
model.add(SimpleRNN(50, activation='relu', input_shape=(window_size, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

model.fit(x,y, epochs=500, verbose=0)
print("Training complete")

input_sequence = np.array([8, 9, 10])
input_sequence = input_sequence.reshape((1, window_size, 1))
prediction = model.predict(input_sequence)
print(f"Prediction for the next number in the sequence is: {prediction[0][0]}")

predictions=model.predict(x)
plt.plot(y,label='True value')
plt.plot(predictions,label='Predicted value')
plt.legend()
plt.show()

import pickle

# Example: assuming you have a model named price_predictor_model
with open("/content/drive/MyDrive/price_model.pkl", 'wb') as file:
    pickle.dump(model, file)

# Define your input sequence here (e.g., [11, 12, 13])
my_input = np.array([11, 12, 13])

# Reshape the input to match the model's expected input shape
my_input = my_input.reshape((1, window_size, 1))

# Get the prediction from the loaded model
my_prediction = loaded_model.predict(my_input)

# Print the prediction
print(f"Input: {my_input.flatten()}")
print(f"Predicted output: {my_prediction[0][0]}")

import pickle

# Load the saved model
with open("/content/drive/MyDrive/price_model.pkl", 'rb') as file:
    loaded_model = pickle.load(file)

with open('/content/drive/MyDrive/price_model.pkl', 'rb') as f:
    loaded_model = pickle.load(f)